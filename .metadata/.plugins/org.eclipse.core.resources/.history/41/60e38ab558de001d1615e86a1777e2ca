/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "clock.h"
#include "gpio.h"
#include "Scheduler.h"
#include "Tasks.h"

void Init(void);
TIM_HandleTypeDef HTim2 =
{ 0 };
void CM_Init(void);

int main(void)
{
	Init();
	//while (1)


}

void Init(void)
{
	uint8_t error = 0;

	// Init HAL mechanism.
	HAL_Init();

	// Init clock peripheral.
	error = SystemClock_Config();
	// Check for error in clock init.
	if (error != 0)
	{
		Error_Handler();
	}

	// Init GPIOs.
	GPIOInit();


	// Initialize tasks module
	TaskInit();

	CM_Init();
	// Init scheduler parameters
	//SchM_Init();

	// Start the scheduler
	//SchM_Start();
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	// Interrupt every 500us.
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);

	// Count increase
	//CounterVal++;

	// Call the callback
	//Callback();

}

void TIM3_IRQHandler(void)
{

	HAL_TIM_IRQHandler(&HTim2);
}

void CM_Init(void)
{
	// Enable clock net for timer 2.
	__HAL_RCC_TIM3_CLK_ENABLE();

	// Config tim 2 for interrupts.
	HTim2.Instance = TIM3;
	HTim2.Init.CounterMode = TIM_COUNTERMODE_UP;
	HTim2.Init.Prescaler = 49; // Ck_CNT = (Clock 100/2) / (1 + Preescaler)
	HTim2.Init.Period = 49; // Freq_int = Ck_CNT / (1 + Period)


	// Enable the interrupt.
	HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
	HAL_NVIC_EnableIRQ(TIM3_IRQn);

	HAL_TIM_Base_Init(&HTim2);
	HAL_TIM_Base_Start_IT(&HTim2);
}
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{

	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
